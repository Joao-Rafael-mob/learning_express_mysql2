// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Product {
  id                Int               @id @default(autoincrement())
  enabled           Boolean?          @default(false)
  name              String
  slug              String
  useInMenu         Boolean?          @default(false)
  stock             Int?              @default(0)
  description       String?
  price             Float
  priceWithDiscount Float
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  ProductImage      ProductImage[]
  ProductOption     ProductOption[]
  ProductCategory   ProductCategory[]
  OrderProduct      OrderProduct[]

  @@map("products")
}

model PaymentTransaction {
  id              String           @id @default(uuid())
  orderId         String
  userId          Int
  amount          Float
  method          FormaDePagamento
  status          PaymentStatus
  transactionDate DateTime         @default(now())
  details         String?
  order           Order            @relation(fields: [orderId], references: [id])
  user            User             @relation(fields: [userId], references: [id])
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELED
}

model Order {
  id                 String               @id @default(uuid())
  userId             Int
  user               User?                @relation(fields: [userId], references: [id])
  orderDate          DateTime?
  status             String?
  orderProduct       OrderProduct[]
  payments           pagamento[]
  PaymentTransaction PaymentTransaction[]
}

model OrderProduct {
  orderId   String
  productId Int
  quantity  Int?
  order     Order?   @relation(fields: [orderId], references: [id])
  product   Product? @relation(fields: [productId], references: [id])

  @@id([orderId, productId])
}

model pagamento {
  id               String           @id @default(uuid())
  userId           Int?
  method           FormaDePagamento
  nomeDoCartao     String
  numeroDoCartao   String
  dataDeVecinmento DateTime
  cvv              String
  user             User?            @relation(fields: [userId], references: [id])
  Order            Order?           @relation(fields: [orderId], references: [id])
  orderId          String?
}

enum FormaDePagamento {
  CREDITO
  BOLETO
}

model User {
  id                 Int                  @id @default(autoincrement())
  firstname          String
  surname            String
  cpf                String?              @unique
  email              String               @unique
  celular            String?
  password           String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  address            Address?
  pagamento          pagamento[]
  Order              Order[]
  PaymentTransaction PaymentTransaction[]

  @@map("users")
}

model Address {
  id          Int     @id @default(autoincrement())
  userId      Int     @unique
  user        User    @relation(fields: [userId], references: [id])
  endereco    String?
  bairro      String?
  cidade      String?
  cep         String?
  complemento String?
}

model Category {
  id              Int               @id @default(autoincrement())
  name            String
  slug            String
  useInMenu       Boolean?          @default(false)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  ProductCategory ProductCategory[]

  @@map("categories")
}

model ProductCategory {
  productId  Int
  categoryId Int

  product  Product  @relation(fields: [productId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])

  @@id([productId, categoryId])
  @@map("product_categories")
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  productId Int
  enabled   Boolean? @default(false)
  path      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id])

  @@map("product_images")
}

model ProductOption {
  id        Int       @id @default(autoincrement())
  productId Int
  title     String
  shape     Shape     @default(SQUARE)
  radius    Int?      @default(0)
  type      InputType @default(TEXT)
  values    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  product Product @relation(fields: [productId], references: [id])

  @@map("product_options")
}

enum Shape {
  SQUARE
  CIRCLE
}

enum InputType {
  TEXT
  COLOR
}
